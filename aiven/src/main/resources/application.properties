mp.messaging.incoming.messages.topic=clickstream
mp.messaging.incoming.messages.value.deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
mp.messaging.outgoing.messages-out.topic=clickstream
mp.messaging.outgoing.messages-out.value.serializer=io.confluent.kafka.serializers.KafkaAvroSerializer

aiven.kafka.bootstrap.servers=CHANGE_ME
#aiven.kafka.api.key=CHANGE_ME
#aiven.kafka.api.secret=CHANGE_ME

aiven.schema.registry.url=CHANGE_ME
aiven.schema.registry.api.key=CHANGE_ME
aiven.schema.registry.api.secret=CHANGE_ME

%managed.kafka.bootstrap.servers=${aiven.kafka.bootstrap.servers}
%managed.kafka.security.protocol=SSL
# SASL instead of SSL
# %managed.kafka.security.protocol=SASL_SSL
# %managed.kafka.sasl.mechanism=SCRAM-SHA-256
# %managed.kafka.sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required  \
#   username="${aiven.kafka.api.key}" \
#   password="${aiven.kafka.api.secret}";

%managed.kafka.ssl.truststore.type=jks
%managed.kafka.ssl.truststore.location=src/main/resources/client.truststore.jks
%managed.kafka.ssl.truststore.password=changeit

%managed.kafka.ssl.keystore.type=PKCS12
%managed.kafka.ssl.keystore.location=src/main/resources/client.keystore.p12
%managed.kafka.ssl.keystore.password=changeit

# automatically register the schema with the registry, if not present
mp.messaging.outgoing.messages-out.auto.register.schemas=true
%managed.quarkus.apicurio-registry.devservices.enabled=false
%managed.kafka.schema.registry.url=${aiven.schema.registry.url}
%managed.kafka.basic.auth.user.info=${aiven.schema.registry.api.key}:${aiven.schema.registry.api.secret}
%managed.kafka.basic.auth.credentials.source=USER_INFO

quarkus.container-image.group=clickstream
